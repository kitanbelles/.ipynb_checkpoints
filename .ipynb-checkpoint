{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "S/N\n",
      "1291076    False\n",
      "1296061    False\n",
      "1295989    False\n",
      "1295777    False\n",
      "1295698    False\n",
      "Name: State, dtype: bool\n",
      "True\n",
      "S/N\n",
      "1314701    True\n",
      "1314702    True\n",
      "1314703    True\n",
      "1314704    True\n",
      "1314705    True\n",
      "Name: State, dtype: bool\n",
      "True\n",
      "S/N\n",
      "1347752    True\n",
      "1347753    True\n",
      "1347754    True\n",
      "1347756    True\n",
      "1347757    True\n",
      "Name: State, dtype: bool\n",
      "Empty DataFrame\n",
      "Columns: []\n",
      "Index: []\n"
     ]
    }
   ],
   "source": [
    "#myfile=pd.read_excel(\"test.xlsx\", sheet_name=1, keep_default_na=False, na_values = [0,\"o\"], index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str, \"State\":str} )\n",
    "nostate = pd.DataFrame()\n",
    "for i in range(0,3):\n",
    "    myfile=pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "    #print(myfile.head())\n",
    "    state_null = myfile[\"State\"].isnull()\n",
    "    print(myfile.State.isnull().any())\n",
    "    print(state_null.head())\n",
    "    nostate.append(myfile[state_null])\n",
    "    \n",
    "print(nostate.tail())\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking for incomplete records \n",
    "\n",
    "incompletestate = pd.concat([pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        [pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        [\"State\"].isnull()]\n",
    "        \n",
    "        for i in range(3,6)], sort=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State Code    True\n",
      "Full Name     True\n",
      "Callup No.    True\n",
      "CNS No.       True\n",
      "State         True\n",
      "Year          True\n",
      "dtype: bool\n",
      "State Code    True\n",
      "Full Name     True\n",
      "Callup No.    True\n",
      "CNS No.       True\n",
      "State         True\n",
      "Year          True\n",
      "dtype: bool\n",
      "State Code    True\n",
      "Full Name     True\n",
      "Callup No.    True\n",
      "CNS No.       True\n",
      "State         True\n",
      "Year          True\n",
      "dtype: bool\n",
      "State Code    True\n",
      "Full Name     True\n",
      "Callup No.    True\n",
      "CNS No.       True\n",
      "State         True\n",
      "Year          True\n",
      "dtype: bool\n"
     ]
    }
   ],
   "source": [
    "# Checking for duplicate records by column \n",
    "\n",
    "dupstatecode=pd.concat([pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        [pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        .duplicated(\"State Code\", keep=False)]\n",
    "        \n",
    "        for i in range(3,6)], sort=False)\n",
    "\n",
    "\n",
    "dupname=pd.concat([pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        [pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        .duplicated(\"Full Name\", keep=False)]\n",
    "        \n",
    "        for i in range(3,6)], sort=False)\n",
    "\n",
    "\n",
    "dupcallup=pd.concat([pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        [pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        .duplicated(\"Callup No.\", keep=False)]\n",
    "        \n",
    "        for i in range(3,6)], sort=False)\n",
    "\n",
    "\n",
    "dupcert=pd.concat([pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        [pd.read_excel(\"test.xlsx\", sheet_name=i, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "        .duplicated(\"CNS No.\", keep=False)]\n",
    "        \n",
    "        for i in range(3,6)], sort=False)\n",
    "\n",
    "#myfile=pd.read_excel(\"test.xlsx\", sheet_name=2, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \"Callup No.\": str, \"CNS No.\": str} )\n",
    "#dup = myfile.duplicated(\"State Code\", keep=False)\n",
    "\n",
    "print(dupstatecode.any())\n",
    "print(dupcert.any())\n",
    "print(dupcallup.any())\n",
    "print(dupname.any())\n",
    "\n",
    "#dup = pd.read_excel(\"test.xlsx\", sheet_name=2, index_col = 0, dtype = {\"State Code\": str, \"Full Name\": str, \n",
    "#                                                                       \"Callup No.\": str, \"CNS No.\": str} ).duplicated(keep=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Saving to file\n",
    "\n",
    "with pd.ExcelWriter (\"Duplicated records.xlsx\") as writer: \n",
    "    dupstatecode.to_excel(writer, sheet_name = \"dupStateCode\")\n",
    "    dupcert.to_excel(writer, sheet_name = \"dupCertNum\")\n",
    "    dupcallup.to_excel(writer, sheet_name = \"dupCallup\")\n",
    "    dupname.to_excel(writer, sheet_name = \"dupName\")\n",
    "    \n",
    "incompletestate.to_excel(\"missing records.xlsx\", sheet_name = \"noState\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
